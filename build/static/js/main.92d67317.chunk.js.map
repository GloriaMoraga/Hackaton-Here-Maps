{"version":3,"sources":["components/mapas/Mapas.js","components/header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","platform","map","state","app_id","app_code","theme","style","window","H","service","Platform","layer","createDefaultLayers","container","document","getElementById","normal","center","lat","lng","zoom","events","mapevents","MapEvents","Behavior","ui","UI","createDefault","react_default","a","createElement","id","width","height","background","Component","Header","className","App","error","_this2","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","message","header_Header","console","log","Mapas","Boolean","location","hostname","match","ReactDOM","render","src_App","serviceWorker","ready","then","registration","unregister"],"mappings":"oMA+DiBA,cA3Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,SAAW,KAChBP,EAAKQ,IAAM,KAEXR,EAAKS,MAAQ,CACTC,OAAQ,uBACRC,SAAU,yBACVC,MAAOb,EAAMa,MACbC,MAAOd,EAAMc,OAVFb,oFAiBfG,KAAKI,SAAW,IAAIO,OAAOC,EAAEC,QAAQC,SAASd,KAAKM,OAEnD,IAAIS,EAAQf,KAAKI,SAASY,sBACtBC,EAAYC,SAASC,eAAe,YAExCnB,KAAKK,IAAM,IAAIM,OAAOC,EAAEjB,IAAIsB,EAAWF,EAAMK,OAAOf,IAAK,CACrDgB,OAAQ,CACJC,IAAKtB,KAAKJ,MAAM0B,IAChBC,IAAKvB,KAAKJ,MAAM2B,KACpBC,KAAMxB,KAAKJ,MAAM4B,OAErB,IAAIC,EAAS,IAAId,OAAOC,EAAEc,UAAUC,UAAU3B,KAAKK,KAEpC,IAAIM,OAAOC,EAAEc,UAAUE,SAASH,GAEvC,IAAId,OAAOC,EAAEiB,GAAGC,GAAGC,cAAc/B,KAAKK,IAAKU,oCAqBnD,OACIiB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WAAWzB,MAAO,CAAC0B,MAAO,OAAQC,OAAQ,QAASC,WAAY,iBAvDjEC,aCWHC,EAZA,SAAA5C,GAEf,OACKoC,EAAAC,EAAAC,cAAA,UAAQO,UAAU,OACfT,EAAAC,EAAAC,cAAA,oBCkDOQ,cAlDX,SAAAA,EAAY9C,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0C,IACf7C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4C,GAAAvC,KAAAH,KAAMJ,KAEDU,MAAQ,CACTgB,IAAK,UACLC,IAAK,UACLoB,MAAO,MANI9C,mFAeD,IAAA+C,EAAA5C,KAChB6C,UAAUC,YAAYC,mBACpB,SAACC,GACCJ,EAAKK,SAAS,CACb3B,IAAK0B,EAASE,OAAOC,SACpB5B,IAAKyB,EAASE,OAAOE,UACrBT,MAAO,QAGX,SAACA,GAAD,OAAWC,EAAKK,SACd,CAACN,MAAOA,EAAMU,6CAShB,OAEIrB,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACfT,EAAAC,EAAAC,cAACoB,EAAD,MACCC,QAAQC,IAAIxD,KAAKM,MAAMiB,KACxBS,EAAAC,EAAAC,cAACuB,EAAD,CACInC,IAAOtB,KAAKM,MAAMgB,IAClBC,IAAOvB,KAAKM,MAAMiB,IAClBC,KAAK,KACLf,MAAM,eAPV,YArCM8B,aCOEmB,QACW,cAA7B/C,OAAOgD,SAASC,UAEe,UAA7BjD,OAAOgD,SAASC,UAEhBjD,OAAOgD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAAS9C,SAASC,eAAe,SD2H3C,kBAAmB0B,WACrBA,UAAUoB,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.92d67317.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n\n        this.platform = null;\n        this.map = null;\n\n        this.state = {\n            app_id: \"GkUohGm3fVKilW9qMHcb\",\n            app_code: \"TXWMDz0kPxL0ZkRWCj-u5w\",\n            theme: props.theme,\n            style: props.style,\n        }\n    }\n\n    // TODO: Add theme selection discussed later HERE\n\n    componentDidUpdate() {\n        this.platform = new window.H.service.Platform(this.state);\n\n        let layer = this.platform.createDefaultLayers();\n        let container = document.getElementById('here-map');\n\n        this.map = new window.H.Map(container, layer.normal.map, {\n            center: {\n                lat: this.props.lat,\n                lng: this.props.lng, },\n            zoom: this.props.zoom,\n          })\n        let events = new window.H.mapevents.MapEvents(this.map);\n        // eslint-disable-next-line\n        let behavior = new window.H.mapevents.Behavior(events);\n        // eslint-disable-next-line\n       let ui = new window.H.ui.UI.createDefault(this.map, layer)\n\n        \n    }    \n    // changeTheme(theme, style) {\n    //     let tiles = this.platform.getMapTileService({'type': 'base'});\n    //     let layer = tiles.createTileLayer(\n    //         'maptile',\n    //         theme,\n    //         256,\n    //         'png',\n    //         {'style': style}\n    //     );\n    //     this.map.setBaseLayer(layer);\n    // }\n    // shouldComponentUpdate(props, state) {\n    //     this.changeTheme(props.theme, props.style);\n    //     return false;\n    // }\n\n    render() {\n        return (\n            <div id=\"here-map\" style={{width: '100%', height: '100vh', background: 'grey' }} />\n        );\n    }\n}\n\n  export default Map;","import React from 'react';\n\nconst Header = props => {\n\nreturn(\n     <header className='top'>\n        <h1>hola</h1>\n    </header>\n\n)\n\n\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport Map from './components/mapas/Mapas.js';\nimport Header from './components/header/Header.js';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            lat: 52.530974,\n            lng: 13.384944, // Null Island\n            error: null,\n        }\n        \n    }\n\n    // When the component is rendered to the DOM for the first time\n  // such as at page load we call the Geolocation API to determine\n  // a latitude and longitude for the browser\n\n  componentDidMount() {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          this.setState({\n           lat: position.coords.latitude,\n            lng: position.coords.longitude,\n            error: null,\n          });\n        },\n        (error) => this.setState(\n          {error: error.message}\n        )\n      );\n}\n\n\n    \n\n    render() {\n        return (\n         \n            <div className=\"App\">\n            <Header />\n            {console.log(this.state.lng)}   \n            <Map\n                lat= { this.state.lat }\n                lng= { this.state.lng }\n                zoom=\"12\"\n                theme=\"normal.day\"\n            />)\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}